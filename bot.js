// Default and Personal information

const TelegramBot = require('node-telegram-bot-api');

// my personal token
const token = '7681893707:AAGEZq3Fp25jYpRYb3DBzOmtxT3pp1wryno';

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –•—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ chatId
const userLanguage = {};

// –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–Ω –≤—ã–±—Ä–∞–ª)
const userState = {};

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
const messages = {
  en: {
    welcome: 'Welcome! ü§ñ',
    functionList: 'Choose one of the available functions:\n/factorization ‚Äî Prime factorization\n/gcd ‚Äî Greatest Common Divisor (GCD)',
    askNumber: 'Please send me a number greater than 1.',
    result: (n, res) => `Prime factors of ${n}: ${res}`,
    gcdResult: (a, b, res) => `The GCD of ${a} and ${b} is: ${res}`,
    invalid: '‚ùó Please enter a valid number greater than 1.',
    gcdInstruction: 'Please enter two numbers separated by a space or comma, and I will calculate their GCD.',
    factorInstruction: 'Please enter a number greater than 1, and I will perform prime factorization.',
  },
  ru: {
    welcome: '–ü—Ä–∏–≤–µ—Ç! ü§ñ',
    functionList: '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:\n/factorization ‚Äî –†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏\n/gcd ‚Äî –ù–û–î (–Ω–∞–∏–±–æ–ª—å—à–∏–π –æ–±—â–∏–π –¥–µ–ª–∏—Ç–µ–ª—å)',
    askNumber: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1.',
    result: (n, res) => `–ü—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —á–∏—Å–ª–∞ ${n}: ${res}`,
    gcdResult: (a, b, res) => `–ù–û–î —á–∏—Å–µ–ª ${a} –∏ ${b}: ${res}`,
    invalid: '‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1.',
    gcdInstruction: '–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ –∑–∞–ø—è—Ç—É—é, –∏ —è –Ω–∞–π–¥—É –∏—Ö –ù–û–î.',
    factorInstruction: '–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1, –∏ —è —Ä–∞–∑–ª–æ–∂—É –µ–≥–æ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏.',
  },
  uk: {
    welcome: '–ü—Ä–∏–≤—ñ—Ç! ü§ñ',
    functionList: '–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π:\n/factorization ‚Äî –†–æ–∑–∫–ª–∞–¥–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Å—Ç—ñ –º–Ω–æ–∂–Ω–∏–∫–∏\n/gcd ‚Äî –ù–û–î (–Ω–∞–π–±—ñ–ª—å—à–∏–π —Å–ø—ñ–ª—å–Ω–∏–π –¥—ñ–ª—å–Ω–∏–∫)',
    askNumber: '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 1.',
    result: (n, res) => `–ü—Ä–æ—Å—Ç—ñ –º–Ω–æ–∂–Ω–∏–∫–∏ —á–∏—Å–ª–∞ ${n}: ${res}`,
    gcdResult: (a, b, res) => `–ù–û–î —á–∏—Å–µ–ª ${a} —ñ ${b}: ${res}`,
    invalid: '‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 1.',
    gcdInstruction: '–í–≤–µ–¥—ñ—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –∞–±–æ –∫–æ–º—É, —ñ —è –∑–Ω–∞–π–¥—É —ó—Ö –ù–°–î.',
    factorInstruction: '–í–≤–µ–¥—ñ—Ç—å –æ–¥–Ω–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ 1, —ñ —è —Ä–æ–∑–∫–ª–∞–¥—É –π–æ–≥–æ –Ω–∞ –ø—Ä–æ—Å—Ç—ñ –º–Ω–æ–∂–Ω–∏–∫–∏.',
  },
};

// –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è —á–∏—Å–ª–∞ –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
function primeFactors(n) {
  const factors = [];
  let divisor = 2;
  while (n >= 2) {
    if (n % divisor === 0) {
      factors.push(divisor);
      n /= divisor;
    } else {
      divisor++;
    }
  }
  return factors;
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ù–û–î
function gcd(num1, num2) {
  let factors1 = primeFactors(num1);
  let factors2 = primeFactors(num2);
  let gcdArray = [];
  for (let i = 0; i < factors1.length; i++) {
    for (let j = 0; j < factors2.length; j++) {
      if (factors1[i] === factors2[j]) {
        gcdArray.push(factors1[i]);
        factors2.splice(j, 1);
        break;
      }
    }
  }

  if (gcdArray.length === 0) {
    return 1;
  }

  let result = 1;
  for (let n = 0; n < gcdArray.length; n++) {
    result *= gcdArray[n];
  }
  return result;
}

// –ö–æ–º–∞–Ω–¥–∞ /start

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  const langKeyboard = {
    reply_markup: {
      keyboard: [['English', '–†—É—Å—Å–∫–∏–π', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞']],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  };

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
  bot.sendMessage(chatId, "Welcome to the Math Functions Bot! ü§ñ\nPlease choose your language:", langKeyboard);
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
bot.on('message', (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text.trim().toLowerCase();

  // –í—ã–±–æ—Ä —è–∑—ã–∫–∞
  if (text === 'english') {
    userLanguage[chatId] = 'en';
    bot.sendMessage(chatId, messages.en.welcome);
    bot.sendMessage(chatId, messages.en.functionList);
    return;
  }
  if (text === '—Ä—É—Å—Å–∫–∏–π') {
    userLanguage[chatId] = 'ru';
    bot.sendMessage(chatId, messages.ru.welcome);
    bot.sendMessage(chatId, messages.ru.functionList);
    return;
  }
  if (text === '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞') {
    userLanguage[chatId] = 'uk';
    bot.sendMessage(chatId, messages.uk.welcome);
    bot.sendMessage(chatId, messages.uk.functionList);
    return;
  }

  const lang = userLanguage[chatId] || 'en';

  // –ö–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏
  if (text === '/gcd') {
    userState[chatId] = 'gcd';
    bot.sendMessage(chatId, messages[lang].gcdInstruction);
    return;
  }

  if (text === '/factorization') {
    userState[chatId] = 'factorization';
    bot.sendMessage(chatId, messages[lang].factorInstruction);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∏—Å–µ–ª
  const numbers = text.split(/[\s,]+/).map(n => parseInt(n)).filter(n => !isNaN(n) && n > 1);

  if (userState[chatId] === 'factorization' && numbers.length === 1) {
    const factors = primeFactors(numbers[0]);
    const res = messages[lang].result(numbers[0], factors.join(' √ó '));
    bot.sendMessage(chatId, res);
    userState[chatId] = null;
    return;
  }

  if (userState[chatId] === 'gcd' && numbers.length === 2) {
    const res = gcd(numbers[0], numbers[1]);
    const msgText = messages[lang].gcdResult(numbers[0], numbers[1], res);
    bot.sendMessage(chatId, msgText);
    userState[chatId] = null;
    return;
  }

  // –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ
  if (userState[chatId] && !text.startsWith('/')) {
    bot.sendMessage(chatId, messages[lang].invalid);
  }
});
